// DISUSUN OLEH:
// Armada Adrian Nasar - 2101684790
// Chrisnaldy Yohannes - 2101639572
// Michael Young - 2101639931

#include <stdio.h>
#include <limits.h>

int graph[1024][1024];
int VERTICES = 0, EDGES = 0, START = 0, END = 0;


//dijkstra request result object -> all in one, complete response in regard to the whole dijkstra's running!
typedef struct HasilDijkstra {
    int length;
    int source;
    int cost[1024];
    int parent[1024];
    char sptSet[1024];
};

//find the minimum distances, takes in costs array and sptSet
int minDistance(int cost[1024], char sptSet[1024]) {
    int minCost = INT_MAX, minIdx;

    //scan through until minimum and not in set has been found
    for (int v = 1; v <= VERTICES; v++) {
        if (!sptSet[v] && cost[v] <= minCost) {
            minCost = cost[v];
            minIdx = v;
        }
    }

    return minIdx;
}

//this function returns a HasilDijkstra struct that contains
//all things you want or maybe didn't want out of this function.
//This behavior is inspired by Golang's multiple return value tuple :)
HasilDijkstra dijkstra(int papan[1024][1024], int source) {
    HasilDijkstra hasil;
    hasil.source = source;
    hasil.length = VERTICES;

    //wipe em all with default values..
    for (int i = 0; i <= VERTICES; i++) {
        hasil.cost[i] = INT_MAX;
        hasil.parent[i] = 0;    //vertex dne!
        hasil.sptSet[i] = 0;
    }

    //make sure the algo sees the source vertex :)
    hasil.cost[source] = 0;
    hasil.parent[source] = -1;


    for (int count = 1; count < VERTICES; count++) {
        //get the minimum vertex that is not in sptSet
        int u = minDistance(hasil.cost, hasil.sptSet);

        //add it to sptSet
        hasil.sptSet[u] = 1;

        //for edges in edges(u):
        for (int v = 1; v <= VERTICES; v++) {
            //if the vertex is not in sptSet and the connection exists and that the new cost is < the old one, switch!
            if (!hasil.sptSet[v] && papan[u][v] && ((hasil.cost[u] + papan[u][v]) < hasil.cost[v])) {
                //1. switch the parent
                hasil.parent[v] = u;

                //2. switch the cost also
                hasil.cost[v] = (hasil.cost[u] + papan[u][v]);
            }
        }
    }

    //return the request result
    return hasil;
}

//backtracks the path taken from the HasilDijkstra response generated by dijkstra() function
//and the desired path location
void printPathBacktrack(HasilDijkstra hasil, int idx) {
    if (hasil.parent[idx] == 0) {       //will only execute if path DNE aka parent = 0
        printf("path dne!\n");
        return;
    }

    //it basically means we're done
    if (hasil.parent[idx] == -1) return;

    //go deeper
    printPathBacktrack(hasil, hasil.parent[idx]);

    //print it out
    printf("%d ", hasil.parent[idx]);
}

int main()
{
    //get the number of vertices
    scanf("%d", &VERTICES);

    //wipe it out with 0s
    for (int i = 0; i <= VERTICES; i++) {
        for (int j = 0; j <= VERTICES; j++) {
            graph[i][j] = 0;
        }
    }

    //then, take input from the user
    for (int i = 1; i <= VERTICES; i++) {
        for (int j = 1; j <= VERTICES; j++) {
            scanf("%d", &graph[i][j]);  //take the weight
            graph[j][i] = graph[i][j];  //keep it consistent: arah pulang, kalo diisi pas arah pulang ga sama yg paling terakir yang berlaku;
        }
    }


    //get the start and end destination
    //WARNING: ALWAYS START WITH 1, NOT 0
    scanf("%d %d", &START, &END);

    /*
    VERTICES = 9;
    int graphin[9][9] = {{0, 4, 0, 0, 0, 0, 0, 8, 0},
                       {4, 0, 8, 0, 0, 0, 0, 11, 0},
                        {0, 8, 0, 7, 0, 4, 0, 0, 2},
                        {0, 0, 7, 0, 9, 14, 0, 0, 0},
                        {0, 0, 0, 9, 0, 10, 0, 0, 0},
                        {0, 0, 4, 0, 10, 0, 2, 0, 0},
                        {0, 0, 0, 14, 0, 2, 0, 1, 6},
                        {8, 11, 0, 0, 0, 0, 1, 0, 7},
                        {0, 0, 2, 0, 0, 0, 6, 7, 0}
                    };
    //do the request!
    HasilDijkstra run = dijkstra(graphin, 1);
    */

    HasilDijkstra run = dijkstra(graph, START);

    /*for (int i = 1; i <= VERTICES; i++) {
        printf("%d ", run.cost[i]);
    }*/

    //printf("\n");
    //printf("%d\n", run.length);

    //print it out
    printf("Path from %d to %d:\n", START, END);
    printPathBacktrack(run, END);
    printf(" %d\n", END);

    return 0;
}
